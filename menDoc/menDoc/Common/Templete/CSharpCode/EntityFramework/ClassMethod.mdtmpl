	#region Insert処理
	/// <summary>
	/// Insert処理
	/// </summary>
	/// <param name="item">Insertする要素</param>
	public static void Insert({mendoc:name}Base item)
	{
		using (var db = new SQLiteDataContext())
		{
			// Insert
			db.Add<{mendoc:name}Base>(item);

			// コミット
			db.SaveChanges();
		}
	}
	#endregion

	#region Update処理
	/// <summary>
	/// Update処理
	/// </summary>
	/// <param name="pk_item">更新する主キー（主キーの値のみ入っていれば良い）</param>
	/// <param name="update_item">テーブル更新後の状態</param>
	public static void Update({mendoc:name}Base pk_item, {mendoc:name}Base update_item)
	{
		using (var db = new SQLiteDataContext())
		{
			var item = db.DbSet_{mendoc:name}.Single(x => {mendoc:primarykeys});
			item = update_item;

			db.SaveChanges();
		}
	}
	#endregion

	#region Delete処理
	/// <summary>
	/// Delete処理
	/// </summary>
	/// <param name="pk_item">削除する主キー（主キーの値のみ入っていれば良い）</param>
	public static void Delete({mendoc:name}Base pk_item)
	{
		using (var db = new SQLiteDataContext())
		{
			var item = db.DbSet_{mendoc:name}.Single(x => {mendoc:primarykeys});
			db.DbSet_{mendoc:name}.Remove(item);
			db.SaveChanges();
		}
	}
	#endregion

	#region Select処理
	/// <summary>
	/// Select処理
	/// </summary>
	/// <returns>全件取得</returns>
	public static List<{mendoc:name}Base> Select()
	{
		using (var db = new SQLiteDataContext())
		{
			return db.DbSet_{mendoc:name}.ToList<{mendoc:name}Base>();
		}
	}
	#endregion